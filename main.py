from embedding_utils import Text2Vector
from elasticsearch import Elasticsearch, RequestError, NotFoundError



def main():
    # Connect to local Elasticsearch instance
    es = Elasticsearch("http://localhost:9200")

    # Check if Elasticsearch is running
    if es.ping():
        print("Connected to Elasticsearch")
    else:
        print("Could not connect to Elasticsearch")

    # test text to vector 
    text = "Tequila is never a good idea but sometimes it is a great idea."
    example_vector = Text2Vector.get_embedding(text)

    # Test cosine similiarity 
    # example_vector =  [0.27408576, 0.63139983, 0.54712992, 0.55951899, 0.0689221, 0.29102479, 0.58620022, 0.27539291, 0.01566464, 0.1374212, 0.57247442, 0.99088095, 0.35652492, 0.54570363, 0.91803902, 0.85144354, 0.18945542, 0.14560582, 0.77449846, 0.05017516, 0.7534972, 0.36988777, 0.43543984, 0.88766787, 0.17117077, 0.21910372, 0.65359289, 0.14436371, 0.20093339, 0.26864954, 0.47779678, 0.42277635, 0.07605504, 0.29368005, 0.9527656, 0.19136951, 0.9405343, 0.29484837, 0.60540901, 0.18717354, 0.39126863, 0.72580814, 0.38959786, 0.8854176, 0.40726384, 0.77804807, 0.10349472, 0.62312106, 0.85617277, 0.86204165, 0.56297782, 0.49013117, 0.27068082, 0.96024412, 0.61374516, 0.40823138, 0.0110008, 0.18955882, 0.8880096, 0.12531603, 0.24886739, 0.02100756, 0.84445032, 0.14062269, 0.20792727, 0.50855959, 0.00202028, 0.91762827, 0.39926317, 0.93012071, 0.89029544, 0.86284034, 0.49558054, 0.67863338, 0.55309821, 0.59630408, 0.9778141, 0.31042513, 0.87862576, 0.13347901, 0.15213321, 0.81598655, 0.34885477, 0.15568525, 0.23429183, 0.55262954, 0.59567121, 0.08282794, 0.76643616, 0.94469267, 0.9607335, 0.90597549, 0.08836714, 0.34463185, 0.07259011, 0.71764583, 0.75599872, 0.57785789, 0.16854359, 0.40125744, 0.28054537, 0.76124834, 0.51481719, 0.87988706, 0.46698184, 0.71214347, 0.99225112, 0.66592632, 0.12496297, 0.03570114, 0.33222261, 0.07168678, 0.17413149, 0.30080527, 0.9730449, 0.30343839, 0.39060382, 0.46157853, 0.20802463, 0.13311338, 0.52292017, 0.19077259, 0.75498103, 0.10408092, 0.11008966, 0.21990764, 0.13597095, 0.35621613, 0.21764933, 0.07332788, 0.01119613, 0.93440139, 0.51448805, 0.74473597, 0.38353575, 0.77875892, 0.23454032, 0.145706, 0.27408576, 0.63139983, 0.54712992, 0.55951899, 0.0689221, 0.29102479, 0.58620022, 0.27539291, 0.01566464, 0.1374212, 0.57247442, 0.99088095, 0.35652492, 0.54570363, 0.91803902, 0.85144354, 0.18945542, 0.14560582, 0.77449846, 0.05017516, 0.7534972, 0.36988777, 0.43543984, 0.88766787, 0.17117077, 0.21910372, 0.65359289, 0.14436371, 0.20093339, 0.26864954, 0.47779678, 0.42277635, 0.07605504, 0.29368005, 0.9527656, 0.19136951, 0.9405343, 0.29484837, 0.60540901, 0.18717354, 0.39126863, 0.72580814, 0.38959786, 0.8854176, 0.40726384, 0.77804807, 0.10349472, 0.62312106, 0.85617277, 0.86204165, 0.56297782, 0.49013117, 0.27068082, 0.96024412, 0.61374516, 0.40823138, 0.0110008, 0.18955882, 0.8880096, 0.12531603, 0.24886739, 0.02100756, 0.84445032, 0.14062269, 0.20792727, 0.50855959, 0.00202028, 0.91762827, 0.39926317, 0.93012071, 0.89029544, 0.86284034, 0.49558054, 0.67863338, 0.55309821, 0.59630408, 0.9778141, 0.31042513, 0.87862576, 0.13347901, 0.15213321, 0.81598655, 0.34885477, 0.15568525, 0.23429183, 0.55262954, 0.59567121, 0.08282794, 0.76643616, 0.94469267, 0.9607335, 0.90597549, 0.08836714, 0.34463185, 0.07259011, 0.71764583, 0.75599872, 0.57785789, 0.16854359, 0.40125744, 0.28054537, 0.76124834, 0.51481719, 0.87988706, 0.46698184, 0.71214347, 0.99225112, 0.66592632, 0.12496297, 0.03570114, 0.33222261, 0.07168678, 0.17413149, 0.30080527, 0.9730449, 0.30343839, 0.39060382, 0.46157853, 0.20802463, 0.13311338, 0.52292017, 0.19077259, 0.75498103, 0.10408092, 0.11008966, 0.21990764, 0.13597095, 0.35621613, 0.21764933, 0.07332788, 0.01119613, 0.93440139, 0.51448805, 0.74473597, 0.38353575, 0.77875892, 0.23454032, 0.145706, 0.46157853, 0.20802463, 0.13311338, 0.52292017, 0.19077259, 0.75498103, 0.10408092, 0.11008966, 0.21990764, 0.13597095, 0.35621613, 0.21764933, 0.07332788, 0.01119613, 0.93440139, 0.51448805, 0.74473597, 0.38353575, 0.77875892, 0.23454032, 0.145706, 0.60540901, 0.18717354, 0.39126863, 0.72580814, 0.38959786, 0.8854176, 0.40726384, 0.77804807, 0.10349472, 0.62312106, 0.85617277, 0.86204165, 0.56297782, 0.49013117, 0.27068082, 0.96024412, 0.61374516, 0.40823138, 0.0110008, 0.18955882, 0.8880096, 0.12531603, 0.24886739, 0.02100756, 0.84445032, 0.14062269, 0.20792727, 0.50855959, 0.00202028, 0.91762827, 0.39926317, 0.93012071, 0.89029544, 0.86284034, 0.49558054, 0.67863338, 0.55309821, 0.59630408, 0.9778141, 0.31042513, 0.87862576, 0.13347901, 0.15213321, 0.81598655, 0.34885477, 0.15568525, 0.23429183, 0.55262954, 0.59567121, 0.08282794, 0.76643616, 0.94469267, 0.9607335, 0.90597549, 0.08836714, 0.34463185, 0.07259011, 0.71764583, 0.75599872, 0.57785789, 0.16854359,  0.08836714, 0.34463185, 0.07259011, 0.71764583, 0.75599872, 0.57785789, 0.16854359, 0.57785789, 0.16854359,  0.08836714, 0.34463185, 0.07259011, 0.71764583, 0.75599872, 0.57785789, 0.16854359,  0.08836714, 0.34463185, 0.07259011, 0.71764583, 0.75599872, 0.57785789, 0.16854359, 0.75599872, 0.57785789, 0.16854359]
   
    try:
        results = Text2Vector.received_text_cosine_similarity("received_text_test01", example_vector, es)
        print("results of consine similiarity", results)
    except RequestError as e:
        print("RequestError occurred:", e)
    except NotFoundError as e:
        print("NotFoundError occurred:", e)
    except Exception as e:
        print("Other Error occurred:", e)
    
    ## Test, return the detail of an index.
    # results = Text2Vector.test_script("received_text_test01", es)
    # print("results of consine similiarity", results)

    scores = Text2Vector.get_similarity_score(results)
    print("print the scores:", scores)

if __name__ == '__main__':
    main()